@page "/"
@using System.Collections.ObjectModel
@inject Services.IBluetoothService Bluetooth

<h1>Bluetooth Devices</h1>

<button @onclick="ScanAsync">Scan for Devices</button>

@if (_isScanning)
{
    <p>Scanning...</p>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color:red">@_errorMessage</p>
}

@if (_devices.Count == 0 && !_isScanning && string.IsNullOrEmpty(_errorMessage))
{
    <p>No devices found.</p>
}
else
{
    <ul>
        @foreach (var d in _devices)
        {
            <li>
                <button @onclick="() => ConnectAsync(d)">
                    @GetDeviceDisplay(d)
                </button>
            </li>
        }
    </ul>
}

@code {
    private string _errorMessage = string.Empty;
    private bool _isScanning = false;
    private ObservableCollection<object> _devices = new();

    protected override void OnInitialized()
    {
        _devices = Bluetooth.Devices;
    }

    private async Task ScanAsync()
    {
        _isScanning = true;
        _errorMessage = string.Empty;
        try
        {
            await Bluetooth.ScanAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorMessage = e.Message;
        }
        _isScanning = false;
    }

    private async Task ConnectAsync(object device)
    {
        await Bluetooth.ConnectAsync(device);
    }

    private string GetDeviceDisplay(object device)
    {
        // BLE device
        if (device is Plugin.BLE.Abstractions.Contracts.IDevice ble)
            return $"{ble.Name} ({ble.Id})";
        // Android classic Bluetooth device
#if ANDROID
        if (device is Android.Bluetooth.BluetoothDevice classic)
            return $"{classic.Name} ({classic.Address})";
#endif
        // Fallback
        return device?.ToString() ?? "Unknown Device";
    }
}